[{"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/index.js":"1","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/lib/converter.js":"2","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/converter.test.js":"3","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/assertions.js":"4","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/index.js":"5","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/overrides.js":"6"},{"size":45,"mtime":1579671564631,"results":"7","hashOfConfig":"8"},{"size":1618,"mtime":1579671564631,"results":"9","hashOfConfig":"8"},{"size":9333,"mtime":1583771237657,"results":"10","hashOfConfig":"11"},{"size":274,"mtime":1579671564631,"results":"12","hashOfConfig":"11"},{"size":219,"mtime":1579671564631,"results":"13","hashOfConfig":"11"},{"size":334,"mtime":1579671564631,"results":"14","hashOfConfig":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gresm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uay8b5",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/index.js",[],"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/lib/converter.js",["28"],"const DOMParser = require('@tryghost/mobiledoc-kit/dist/commonjs/mobiledoc-kit/parsers/dom').default;\nconst Builder = require('@tryghost/mobiledoc-kit/dist/commonjs/mobiledoc-kit/models/post-node-builder').default;\nconst mobiledocRenderer = require('@tryghost/mobiledoc-kit/dist/commonjs/mobiledoc-kit/renderers/mobiledoc').default;\nconst {createParserPlugins} = require('@tryghost/kg-parser-plugins');\nconst {JSDOM} = require('jsdom');\n\nmodule.exports.toMobiledoc = (html, options = {}) => {\n    // 1. sanitize HTML\n    // @TODO: what sanitisations are needed?\n    let sanitizedHTML = html;\n\n    // 2. Do something vaguely like loadPost\n    // https://github.com/ErisDS/mobiledoc-kit/blob/master/src/js/editor/editor.js#L193\n\n    // 2.a. Parse our HTML and convert to a DOM with same API as browser\n    let dom = new JSDOM(`<body>${sanitizedHTML}</body>`);\n\n    // 2.b. Use Mobiledoc-kit's own DOM Parser to convert the DOM into mobiledoc's internal format\n    // We use our parser plugins by default, but this is extensible\n    if (!options.plugins) {\n        options.plugins = createParserPlugins({\n            createDocument(html) {\n                return (new JSDOM(html)).window.document;\n            }\n        });\n    }\n    let parser = new DOMParser(new Builder(), options);\n    let post = parser.parse(dom.window.document.body);\n\n    // 3. Do something vaguely like serializePost, to render the mobiledoc internal format as mobiledoc\n    // https://github.com/ErisDS/mobiledoc-kit/blob/master/src/js/editor/editor.js#L567\n    let mobiledoc = mobiledocRenderer.render(post, '0.3.1');\n\n    return mobiledoc;\n};\n","/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/converter.test.js",[],"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/assertions.js",[],"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/index.js",[],"/home/neo/code/Ghost-SDK/packages/html-to-mobiledoc/test/utils/overrides.js",[],{"ruleId":"29","severity":1,"message":"30","line":22,"column":28,"nodeType":"31","endLine":22,"endColumn":32},"no-shadow","'html' is already declared in the upper scope.","Identifier"]